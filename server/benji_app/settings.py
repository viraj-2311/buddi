"""
Django settings for benji_app project.

Generated by 'django-admin startproject' using Django 3.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""

import os
import socket
from datetime import timedelta
import sentry_sdk
from dotenv import load_dotenv
from sentry_sdk.integrations.django import DjangoIntegration
from django.core.exceptions import DisallowedHost
from sentry_sdk.integrations.logging import ignore_logger

load_dotenv()

def get_env(variable_name, default=None):
    value = os.getenv(variable_name)
    if value is None:
        if default:
            return default
        else:
            raise ValueError(
                f"{variable_name} is not presented in environment variables. Check your .env file"
            )
    if str(value).lower() in ("true", "false"):
        return str(value).lower() == "true"
    return value


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "fmubxi2b81=v&&$hq0-%0blqf3wn$977ye3vb+4)94!&_65a0i"
)

# SECURITY WARNING: don't run with debug turned on in production!
_debug = os.environ.get("DEBUG", True)
if _debug == "0":
    DEBUG = True
elif _debug == "1":
    DEBUG = False
else:
    DEBUG = _debug


# Prepare allowed hosts
ALLOWED_HOSTS = os.environ.get("ALLOWED_HOSTS", "*").split(",")

# The extra domains are mainly for supporting AWS's health check
# Because it always uses the private ip address of each instance, so the domain need
#   to be generated dynamically
extra_domains = []
prefetch_urls = socket.gethostbyname_ex(socket.gethostname())
for domain in prefetch_urls:
    if isinstance(domain, list) and len(domain) > 0:
        _domain = domain[0]
        if _domain:
            extra_domains.append(_domain)
    elif isinstance(domain, str):
        extra_domains.append(domain)

ALLOWED_HOSTS += extra_domains
# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.humanize",
    "django_celery_results",
    "rest_framework",
    "apps.sila_adapter",
    "apps.company_network",
    "apps.finance",
    "apps.help",
    "apps.jobs",
    "apps.message",
    "apps.notification",
    "apps.permission",
    "apps.personal_network",
    "apps.user",
    "apps",
    "corsheaders",
    "django_s3_storage",
    "django_celery_beat",
    "django_extensions",
    "health_check",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "corsheaders.middleware.CorsMiddleware",
]

if os.getenv('BENJI_ENVIRONMENT') in {'local', 'local_noserver', 'development', 'staging'}:
    # INSTALLED_APPS += ['silk']
    # MIDDLEWARE += ['silk.middleware.SilkyMiddleware']
    pass


SILKY_MAX_RESPONSE_BODY_SIZE = 1024
SILKY_META = True

# CORS settings
_cors_allow_all = os.environ.get("CORS_ORIGIN_ALLOW_ALL", True)
if _cors_allow_all == "0":
    CORS_ORIGIN_ALLOW_ALL = True
elif _cors_allow_all == "1":
    CORS_ORIGIN_ALLOW_ALL = False
else:
    CORS_ORIGIN_ALLOW_ALL = _cors_allow_all
CORS_ORIGIN_WHITELIST = os.environ.get(
    "CORS_ORIGIN_WHITELIST", "http://localhost:3000"
).split(",")

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": (
        "rest_framework_simplejwt.authentication.JWTAuthentication",
        "rest_framework.authentication.SessionAuthentication",  # Required for Browsable API login
    ),
    # API Versioning (https://www.django-rest-framework.org/api-guide/versioning/#namespaceversioning)
    "DEFAULT_VERSIONING_CLASS": "rest_framework.versioning.NamespaceVersioning",
    "DEFALTPAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "DEFAULT_SCHEMA_CLASS": "rest_framework.schemas.coreapi.AutoSchema",
    "PAGE_SIZE": None,
}

SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(days=5),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=30),
}

ROOT_URLCONF = "benji_app.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "benji_app.wsgi.application"

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

# This env variable is defined in docker compose
DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.environ["BENJI_DATABASE_NAME"],
        "USER": os.environ["BENJI_DATABASE_USER"],
        "PASSWORD": os.environ["BENJI_DATABASE_PASSWORD"],
        "HOST": os.environ["BENJI_DATABASE_HOST"],
        "PORT": os.environ["BENJI_DATABASE_PORT"],
        "ATOMIC_REQUESTS": True,
        "TEST": {
            "NAME": "db_test",
        },
    },
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

STATIC_URL = "/api/v1/static/"
STATIC_ROOT = BASE_DIR + '/static'

AUTH_USER_MODEL = "user.BenjiAccount"

BENJI_RABBIT = os.environ.get("BENJI_RABBIT_HOST", "localhost")

# CELERY STUFF
CELERY_BROKER_URL = os.environ.get(
    "CELERY_BROKER_URL", f"amqp://myuser:mypassword@{BENJI_RABBIT}//"
)
CELERY_BACKEND = os.environ.get(
    "CELERY_BACKEND", f"rpc://user:password@{BENJI_RABBIT}//"
)
CELERY_RESULT_BACKEND = "django-db"
CELERY_TASK_DEFAULT_QUEUE = "api"
BACKEND_TASK_DEFAULT_QUEUE = "backend"
CELERY_ACCEPT_CONTENT = ["application/json"]
CELERY_TASK_SERIALIZER = "json"
CELERY_RESULT_SERIALIZER = "json"
CELERY_TIMEZONE = TIME_ZONE
CELERY_BEAT_SCHEDULE = {
    "check_memo_status": {
        "task": "check_memo_status",
        "schedule": 30.0,
        "args": (),
    },
}


# AWS STUFF
# AWS_REGION = os.getenv("AWS_REGION")
# AWS_BUCKET_NAME = os.getenv("AWS_BUCKET_NAME")
# AWS_SECRET_ACCESS_KEY = os.getenv("AWS_SECRET_ACCESS_KEY")
# AWS_ACCESS_KEY_ID = os.getenv("AWS_ACCESS_KEY_ID")

# Number of hours for user activation token expiration
ACTIVATION_TOKEN_EXPIRY = 24
MEMO_INVITATION_TOKEN_EXPIRY = 24

# The frontend base url for user activation url
FRONTEND_BASE_URL = os.getenv("FRONTEND_BASE_URL")
FRONTEND_SIGNUP_URL = os.getenv("FRONTEND_SIGNUP_URL")
BACKEND_BASE_URL = os.getenv("BACKEND_BASE_URL")

AWS_ACCESS_KEY_ID = os.getenv("DJANGO_AWS_ACCESS_KEY_ID")
AWS_SECRET_ACCESS_KEY = os.getenv("DJANGO_AWS_SECRET_ACCESS_KEY")
AWS_STORAGE_BUCKET_NAME = os.getenv("DJANGO_AWS_STORAGE_BUCKET_NAME")
AWS_REGION = os.getenv("DJANGO_AWS_REGION")

# Google OAuth
GOOGLE_OAUTH_AUTH_BASE_URL = os.environ.get(
    "GOOGLE_OAUTH_AUTH_BASE_URL",
    "https://accounts.google.com/o/oauth2/auth?response_type=code",
)
GOOGLE_OAUTH_CLIENT_ID = os.environ.get(
    "GOOGLE_OAUTH_CLIENT_ID",
    "352893478657-8fpbktjforbh9j99q0u5ju9tp6m9q9qd.apps.googleusercontent.com",
)
GOOGLE_OAUTH_CLIENT_SECRET = os.environ.get(
    "GOOGLE_OAUTH_CLIENT_SECRET", "ttfIuVH5JD1vMRuXB5wAxh3Z"
)
GOOGLE_OAUTH_REDIRECT_URL = os.environ.get(
    "GOOGLE_OAUTH_REDIRECT_URL",
    os.path.join(BACKEND_BASE_URL, "api/v1/user_contacts/callback"),
)
GOOGLE_OAUTH_SCOPE = os.environ.get(
    "GOOGLE_OAUTH_SCOPE", "https://www.googleapis.com/auth/contacts.readonly"
)
GOOGLE_OAUTH_FULL_URL = GOOGLE_OAUTH_AUTH_BASE_URL + (
    f"&redirect_uri={GOOGLE_OAUTH_REDIRECT_URL}&client_id={GOOGLE_OAUTH_CLIENT_ID}"
    f"&scope={GOOGLE_OAUTH_SCOPE}"
)

# sentry.io error tracker integration
SENTRY_ENV = os.environ.get("SENTRY_ENV")
if SENTRY_ENV:

    ignore_logger("django.security.DisallowedHost")

    sentry_sdk.init(
        dsn=(
            "https://a4133ca2a91c43c58cdfe8937c53a09f@o1054824.ingest.sentry.io/6040466"
        ),
        integrations=[DjangoIntegration()],
        traces_sample_rate=0.3,
        send_default_pii=True,
        environment=SENTRY_ENV,
        ignore_errors=[DisallowedHost],
    )


# for swagger auth
LOGIN_URL = 'rest_framework:login'

# for SILA
SILA_CONFIG = {
    'ENVIRONMENT': os.environ.get('SILA_ENVIRONMENT', 'SANDBOX'),
    'SILA_BENJI_APP_HANDLE': os.environ.get("SILA_APP_HANDLE"),
    'PRIVATE_KEY': os.environ.get("SILA_API_KEY"),
    'SILA_BUSINESS_UUID': os.environ.get("SILA_BUSINESS_UUID"),
    'ENCRYPTION_KEY_PATH': os.environ.get("EC2_RSA_PUBLIC_KEY"),
    "IS_PRIVATE_KEY_ENCRYPTED": (
        True if os.environ.get("EC2_RSA_PUBLIC_KEY") else False
    ),
}

LOG_BASE_DIR = "/var/log/benji"
LOG_BASE_DIR = os.environ.get("LOG_BASE_DIR", "/var/log/benji")

# LOGGING = {
#     "version": 1,
#     "disable_existing_loggers": False,
#     "formatters": {
#         "generic": {
#             # exact format is not important, this is the minimum information
#             "format": ("%(asctime)s %(levelname)-8s [MOD %(module)s:LNE "
#                        "%(lineno)d:FUN %(funcName)s] %(message)s"),
#         },
#     },
#     "filters": {
#         "debug_sql": {"()": "benji_app.logger_config.DebugSQL_Filter"},
#     },
#     "handlers": {
#         "debug": {
#             "level": "DEBUG",
#             "class": "logging.StreamHandler",
#             "formatter": "generic",
#             "filters": ["debug_sql"],
#         },
#         "file_output": {
#             "level": "DEBUG",
#             "class": "logging.handlers.RotatingFileHandler",
#             "maxBytes": 1024 * 1024 * 10,  # 10MB
#             "backupCount": 10,
#             "filename": LOG_BASE_DIR + "/debug.log",  # noqa: F405
#             "formatter": "generic",
#             "filters": ["debug_sql"],
#         },
#     },
#     "loggers": {
#         "apps": {
#             "level": "DEBUG", "handlers": ["debug", "file_output"], "propagate": True
#         },
#         # "django": {
#         #     "level": "DEBUG", "handlers": ["debug", "file_output"], "propagate": True
#         # },
#     },
# }
