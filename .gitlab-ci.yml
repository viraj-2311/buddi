image:
  name: docker/compose:1.25.4
  entrypoint: [""]

services:
  - docker:dind

stages:
  - build
  - deploy
  - eb-deploy-nodejs
  - eb-deploy-django

variables:
  DOCKER_HOST: tcp://docker:2375
  DOCKER_DRIVER: overlay2

build:
  stage: build
  before_script:
    - apk add --no-cache bash
    - apk add --update curl && rm -rf /var/cache/apk/*
    - env
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/$CI_COMMIT_BRANCH
    - export SERVER_IMAGE=$IMAGE:server
    - export CLIENT_IMAGE=$IMAGE:client
  script:
    - ls -la
    - pwd
    - echo $IMAGE
    - echo $SERVER_IMAGE
    - echo $CLIENT_IMAGE
    - docker login -u $CI_REGISTRY_USER -p $CI_JOB_TOKEN $CI_REGISTRY
    - docker pull $SERVER_IMAGE || true
    - docker pull $CLIENT_IMAGE || true
    - docker-compose -f docker-compose.ci.yml build
    - docker push $SERVER_IMAGE
    - docker push $CLIENT_IMAGE
  only:
    - development
    - staging
  when: always

deploy_dev:
  stage: deploy
  before_script:
    - apk add --no-cache bash
    - apk add --update openssh-client rsync && rm -rf /var/cache/apk/*
    - env
    - export CI_REGISTRY_USER=$CI_REGISTRY_USER
    - export CI_JOB_TOKEN=$CI_JOB_TOKEN
    - export CI_REGISTRY=$CI_REGISTRY
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/development
    - export SERVER_IMAGE=$IMAGE:server
    - export CLIENT_IMAGE=$IMAGE:client
  environment:
    name: dev
  script:
    - mkdir -p ~/.ssh
    - printenv | grep DATABASE > .env
    - printenv | grep IMAGE >> .env
    - printenv | grep CI_ >> .env
    - printenv | grep PGPASSWORD >> .env || true
    - printenv | grep REACT_ >> .env || true
    - printenv | grep FRONTEND_ >> .env || true
    - printenv | grep BACKEND_ >> .env || true
    - printenv | grep BENJI_ENVIRONMENT >> .env || true
    - printenv | grep SILA_ >> .env || true
    - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./deploy.sh
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP_ADDRESS "mkdir -p /home/ubuntu/benji-app/docker/envs"
    - scp -o StrictHostKeyChecking=no -r ./.env docker-compose.yml docker/envs ubuntu@$EC2_PUBLIC_IP_ADDRESS:/home/ubuntu/benji-app
    - scp -o StrictHostKeyChecking=no -r docker/envs/.env.template* ubuntu@$EC2_PUBLIC_IP_ADDRESS:/home/ubuntu/benji-app/docker/envs
    - bash ./deploy.sh
  only:
    - development
  when: on_success

deploy_staging:
  stage: deploy
  before_script:
    - apk add --no-cache bash
    - apk add --update openssh-client rsync && rm -rf /var/cache/apk/*
    - env
    - export CI_REGISTRY_USER=$CI_REGISTRY_USER
    - export CI_JOB_TOKEN=$CI_JOB_TOKEN
    - export CI_REGISTRY=$CI_REGISTRY
    - export IMAGE=$CI_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME/staging
    - export SERVER_IMAGE=$IMAGE:server
    - export CLIENT_IMAGE=$IMAGE:client
  environment:
    name: buddi-bands-staging
  script:
    - mkdir -p ~/.ssh
    - printenv | grep DATABASE > .env
    - printenv | grep IMAGE >> .env
    - printenv | grep CI_ >> .env
    - printenv | grep PGPASSWORD >> .env || true
    - printenv | grep REACT_ >> .env || true
    - printenv | grep FRONTEND_ >> .env || true
    - printenv | grep BACKEND_ >> .env || true
    - printenv | grep BENJI_ENVIRONMENT >> .env || true
    - printenv | grep SILA_ >> .env || true
    - echo "$PRIVATE_KEY" | tr -d '\r' > ~/.ssh/id_rsa
    - chmod 700 ~/.ssh/id_rsa
    - eval $(ssh-agent -s)
    - ssh-add ~/.ssh/id_rsa
    - ssh-keyscan -H 'gitlab.com' >> ~/.ssh/known_hosts
    - chmod +x ./deploy.sh
    - ssh -o StrictHostKeyChecking=no ubuntu@$EC2_PUBLIC_IP_ADDRESS "mkdir -p /home/ubuntu/benji-app/docker/envs"
    - scp -o StrictHostKeyChecking=no -r ./.env docker-compose.yml docker/envs ubuntu@$EC2_PUBLIC_IP_ADDRESS:/home/ubuntu/benji-app
    - scp -o StrictHostKeyChecking=no -r docker/envs/.env.template* ubuntu@$EC2_PUBLIC_IP_ADDRESS:/home/ubuntu/benji-app/docker/envs
    - bash ./deploy.sh
  only:
    - staging
  when: on_success

.eb-deploy:
  image: python:3.9-slim
  before_script:
      - pip3 install awsebcli --upgrade
      - mkdir ~/.aws/
      - touch ~/.aws/credentials
      - printf "[eb-cli]\naws_access_key_id = %s\naws_secret_access_key = %s\n" "$AWS_ACCESS_KEY_ID" "$AWS_SECRET_ACCESS_KEY" >> ~/.aws/credentials

backend-prod:
    extends: .eb-deploy
    stage: eb-deploy-django
    environment: prod
    script:
        - cd server
        # Make sure all init script can be executed.
        - find . -name *.sh -exec chmod +x {} \;
        - printf '\n'| eb init benji-app -r us-east-2
        - eb deploy --timeout 30 $AWS_EB_BACKEND_ENVIRONMENT
        - cd ..
    only:
        - production
    when: always

frontend-prod:
    extends: .eb-deploy
    environment: prod
    stage: eb-deploy-nodejs
    script:
        - cd client
        # Make sure all init script can be executed.
        - find . -name *.sh -exec chmod +x {} \;
        - printf '\n'| eb init buddi-frontend -r us-east-2
        - eb deploy --timeout 30 $AWS_EB_FRONTEND_ENVIRONMENT
        - cd ..
    only:
        - production
    when: always
